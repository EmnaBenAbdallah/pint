#!/usr/bin/env python3

import sys

import itertools

class Lit:
        def __init__(self, name, pos=True):
                self.__name = name
                self.__pos = pos
        @property
        def name(self):	
                return self.__name
        @property
        def isneg(self):
                return not self.__pos
        @property
        def ispos(self):
                return self.__pos
        def __repr__(self):
                return "%s%s" % ("!" if not self.__pos else "", self.__name)
        def neg(self):
                return Lit(self.__name, not self.__pos)
        
        def __eq__(self, l):
                if not isinstance(l, Lit):
                        return False
                return l.__name == self.__name and l.__pos == self.__pos
        def __hash__(self):
                return hash((self.__name, self.__pos))

class AndClause(set):
        def __init__(self, *lits):
                if False in lits:
                        self.add(False)
                else:
                        for lit in lits:
                                if lit.neg() in self:
                                        self.clear()
                                        self.add(False)
                                        break
                                else:
                                        self.add(lit)
        def __hash__(self):
                return hash(tuple(self))

        def __repr__(self):
                if False in self:
                        return "false"
                elif len(self) == 0:
                        return "true"
                else:
                        return " and ".join([repr(l) for l in self])
        
        def inv(self):
                return AndClause(*[l.neg() for l in self])


class DNF(set):
        def __init__(self, *ands):
                self.update(ands)
                self.simplify()
        
        def __repr__(self):
                if len(self) == 0:
                        return "false"
                elif len(self) == 1:
                        return repr(list(self)[0])
                else:
                        return " or ".join(["(%s)" % repr(andc) if len(andc) > 1 else repr(andc) \
                                                                        for andc in self])
        
        def __or__(dnf1, dnf2):
                dnf = DNF(*dnf1.union(dnf2))
                dnf.simplify()
                return dnf
        
        def __ior__(self, dnf2):
                self.update(dnf2)
                self.simplify()
                return self
        
        def simplify(self):
            try:
                self.remove(AndClause(False))
            except KeyError:
                pass
            andc = list(sorted(self, key=len))
            while len(andc):
                largest = andc.pop()
                if largest.inv() in andc:
                    self.clear()
                    self.add(AndClause())
                    break
                for c in andc:
                    if largest.issuperset(c):
                        self.remove(largest)
                        break
        
        def neg(self):
            dnf = DNF(*[AndClause(*[l.neg() for l in x]) for x in itertools.product(*self)])
            return dnf


def parse_lit(expr):
    expr = expr.strip()
    if expr[0] == "!":
        expr = expr[1:]
        pos = False
    else:
        pos = True
    return Lit(expr, pos)

def parse_andclause(expr):
    if "|" in expr:
        raise Exception("unsupported and-clause %s" % expr)
    expr = expr.strip()
    if expr[0] == "(":
        expr = expr[1:-1]
    parts = expr.split("&")
    lits = map(parse_lit, parts)
    return AndClause(*lits)

def parse_expr(expr):
    expr = expr.strip()
    parts = expr.split("|")
    return DNF(*map(parse_andclause, parts))


def parse_line(line):
    [a, expr] = line.strip().split(":")
    expr = parse_expr(expr)
    return (a,expr)


def parse_input(inp):
    AN = []
    for line in inp:
        if line.strip():
            AN.append(parse_line(line))
    return AN

if __name__ == "__main__":
    inp = sys.stdin
    AN = parse_input(inp)

    marking = [n.strip() for n in sys.argv[1].split(",")]
    for (a, _) in AN:
        print("\"%s\" [0,1]" % a)
    print()
    for (a, dnf1) in AN:
        for (a0, a1, dnf) in [(0, 1, dnf1), (1, 0, dnf1.neg())]:
            for conj in dnf:
                if Lit(a,a1) in dnf:
                    continue
                strans = "\"%s\" %d -> %d" % (a, a0, a1)
                if conj:
                    strans += " when "
                    skip = False
                    for l in conj:
                        if l == Lit(a,a1):
                            skip = True
                    if skip:
                        continue
                    conj = ["\"%s\"=%d" % (l.name, 1 if l.ispos else 0) for l in conj if l != Lit(a,a0)]
                    strans += " and ".join(conj)
                print(strans)
        print()
    print("initial_state %s" % (", ".join(["\"%s\"=1" % a for a in marking])))



