#!/usr/bin/env python3
"""
Copyright or © or Copr. Loïc Paulevé, Morgan Magnin, Olivier Roux (2010)

loic.pauleve@irccyn.ec-nantes.fr
morgan.magnin@irccyn.ec-nantes.fr
olivier.roux@irccyn.ec-nantes.fr

This software is a computer program whose purpose is to provide Process
Hitting related tools.

This software is governed by the CeCILL license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the
CeCILL license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author, the holder of the
economic rights, and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL license and that you accept its terms.
"""

# NOTE: converts the 'reaction' file of CNA into a Process Hitting.
#   http://www.mpi-magdeburg.mpg.de/projects/cna/manual/manual_cellnetanalyzer95.htm#_Toc261856171

import os
import sys

import itertools

class V(dict):
    def __hash__(self):
        return hash(tuple(sorted(self.items())))

class ValSet(set):
    def domain(self):
        d = set()
        for v in self:
            d.update(v.keys())
        return list(sorted(d))

    def simplify(self, sd, max_ite=None):
        vs = self
        for d in itertools.permutations(self.domain()):
            vs = DDD(vs, d, sd).valset()
            if max_ite is not None:
                max_ite -= 1
                if max_ite == 0:
                    break
        return vs

    def filter(self, a, i):
        return ValSet([v for v in self if a not in v or v[a] == i])


class DDD:
    TOP = 1
    BOT = 2
    def __init__(self, vs, d, sd):
        self.v = {}
        self.h = 0
        self.size = 1
        if len(vs) == 0:
            self.a = DDD.BOT
        elif len(d) == 0:
            self.a = DDD.TOP
        else:
            self.a = d[0]
            self.v = {}
            for i in sd[self.a]:
                self.v[i] = DDD(vs.filter(self.a, i), d[1:], sd)
            self.simplify()
            if self.v:
                self.h = 1 + max([v.h for v in self.v.values()])
            for v in self.v.values():
                self.size += v.size

    def remove_bots(self):
        if self.a in [DDD.TOP, DDD.BOT]:
            return
        self.size = 1
        k = list(self.v.keys())
        for i in k:
            self.v[i].remove_bots()
            if self.v[i].a == DDD.BOT:
                del self.v[i]
            else:
                self.size += self.v[i].size
        if len(self.v) == 0:
            self.a = DDD.BOT
            self.h = 0
        else:
            self.h = 1 + max([v.h for v in self.v.values()])


    @classmethod
    def build_reduced(celf, vs, sd, max_ite=None):
        _d = list(sd.keys())
        ddd = None
        for d in itertools.permutations(_d):
            ddd_ = celf(vs, d, sd)
            ddd_.remove_bots()
            if ddd is None or ddd.size > ddd_.size:
                ddd = ddd_
            if max_ite is not None:
                max_ite -= 1
                if max_ite < 0:
                    break
        return ddd

    def __repr__(self):
        if self.a == DDD.BOT:
            return "BOT"
        elif self.a == DDD.TOP:
            return "TOP"
        else:
            return "<%s: %s>" % (self.a, self.v)

    def __eq__(self, x):
        return x.a == self.a and x.v == self.v

    def simplify(self):
        alleq = True
        i0 = list(self.v.keys())[0]
        for i in self.v.keys():
            if self.v[i] != self.v[i0]:
                alleq = False
                break
        if alleq:
            self.a = self.v[i0].a
            self.v = self.v[i0].v

    def valset(self):
        if self.a == DDD.BOT:
            return ValSet()
        if self.a == DDD.TOP:
            return ValSet([V()])
        i_nontop = []
        for i in self.v.keys():
            if self.v[i].a != DDD.TOP:
                i_nontop.append(i)
        implicit = len(i_nontop) == 1
        fvs = ValSet()
        for i in self.v.keys():
            vs = self.v[i].valset()
            if implicit and i in i_nontop:
                pass
            else:
                for v in vs:
                    v[self.a] = i
            fvs.update(vs)
        return fvs



reaction_file = sys.argv[1]
assert (os.path.basename(reaction_file) == "reactions"), "Give the file 'reactions' as parameter"
if len(sys.argv) > 2:
    MAX_COOP = int(sys.argv[2])
else:
    MAX_COOP = 3

def explode_line( line ) :
	row = {}
	reqpart, parpart = line.replace("\t", " ").split("|")
	# reqpart
	reqpart = [f for f in reqpart.strip().split(" ") if f]
	reqpart.pop(0)

	reqpart = " ".join(reqpart)
	left, right = reqpart.split("=")

	def read_proc_presence( data ) :
		level, sort = [f for f in data.strip().split(" ") if f]
		level = int(level)
		positive = True
		if sort[0] == "!" :
			sort = sort[1:]
			positive = False
		return (sort, level, positive)
	
	if not right.strip() :
		return None

	(target_sort, bounce_level, bounce_presence) = read_proc_presence(right)
	assert bounce_presence

	hitters = left.strip().split("+")
	hitters = [read_proc_presence(h) for h in hitters if h.strip()]

	row["Target"] = (target_sort, bounce_level)
	row["Hitters"] = hitters

	# parpart
	parpart = [f for f in parpart.strip().split(" ") if f]
	row["Default"], row["Par1"], row["Par2"], row["Par3"] = parpart[0:4]

	return row


sorts = {} # {sort -> (maxlevel, default_value)}
interactions = {} # {target -> hitter_list list}

def update_sorts( sort, level, default ) :
	if default is not None :
		try :
			default = int(default)
		except : 
			default = None
	if sort in sorts :
		old_maxlevel, old_default = sorts[sort]
	else :
		old_maxlevel, old_default = 0, 0
	maxlevel = max(level, old_maxlevel)
	assert maxlevel <= 1
	default = default if default is not None else old_default
	sorts[sort] = (maxlevel, default)


for line in open(reaction_file) :
	row = explode_line(line)
	if row is None :
		#print("Ignoring %s" % line, file=sys.stderr)
		continue
	elif row["Par3"] == '1' :
		print("Excluding %s" % row, file=sys.stderr)
		continue
	
	target_sort, bounce_level = row["Target"]
	assert bounce_level == 1

	update_sorts(target_sort, bounce_level, row["Default"] if not row["Hitters"] else None)

	assert row["Par1"] == '0'

	OR = interactions[target_sort] if target_sort in interactions else []
	OR.append(row["Hitters"])
	interactions[target_sort] = OR

#
# processes definition
#
for sort, (maxlevel, default) in sorts.items() :
	print("process %s %s" % (sort, maxlevel))
print()


#
# actions
#

def valuate_ANDi( ANDi, value ) :
	for (idx, level, positive) in ANDi :
		v = value[idx]
		if positive and v != level or \
				not positive and v == level :
			return 0
	return 1
	
def valuate( ORi, value ) :
	return sum([ valuate_ANDi(ANDi, value) for ANDi in ORi])

def separate_values( names, values, OR ) :
	falses, trues = [], []

	ORi = [[(names.index(sort), level, positive) for (sort, level, positive) in o] for o in OR]

	for value in values :
		ret = valuate(ORi, value)
		(trues if ret else falses).append(value)

	return (falses, trues)


for target_sort, OR in sorted(interactions.items()) :
        if [] in OR :
                assert OR == [[]]
                continue
        elif len(OR) == 1 and len(OR[0]) == 1 :
                (hitter_sort, hitter_level, hitter_positive) = OR[0][0]
                if not hitter_positive:
                        hitter_level = 1 - hitter_level
                print("%s %s -> %s %s %s" % (hitter_sort, hitter_level, target_sort, 1 - hitter_level, hitter_level))
                print("%s %s -> %s %s %s" % (hitter_sort, 1 - hitter_level, target_sort, hitter_level, 1 - hitter_level))
        else :
                hitter_sorts = set()
                for o in OR :
                        hitter_sorts.update([sort for (sort, _, _) in o])
                hitter_sorts = list(hitter_sorts)

                values = [[]]
                for s in hitter_sorts :
                        values = [v + [0] for v in values] \
                                        + [v + [1] for v in values] 

                falses, trues = separate_values(hitter_sorts, values, OR)

                print(target_sort, OR, file=sys.stderr)

                if len(hitter_sorts) <= MAX_COOP:
                        sm = "[%s] in [%s]" % (
                                        ";".join(hitter_sorts),
                                        ";".join(["[%s]" % ";".join(map(str, value)) for value in trues]))
                        v = 1

                else:
                        sd = dict([(a, [0,1]) for a in hitter_sorts])
                        def b2d(b):
                                return dict([(hitter_sorts[n],i) for n, i in enumerate(b)])
                        tvs = ValSet([V(b2d(b)) for b in trues])
                        fvs = ValSet([V(b2d(b)) for b in falses])

                        def expand_v(v, d) :
                            vd = list(set(d) - set(v.keys()))
                            for e in itertools.product(*[sd[a] for a in vd]):
                                v = V(v.copy())
                                for i, a in enumerate(vd):
                                    v[a] = e[i]
                                yield v

                        def v2expr(v):
                            v = list(sorted(v))
                            return "[%s] in [[%s]]" \
                                        % (";".join(x[0] for x in v), ";".join(str(x[1]) for x in v)) \

                        def ddd2expr(ddd, mem=[]):

                            expr = ""
                            if ddd.h <= MAX_COOP:
                                if mem:
                                    expr = v2expr(mem) + " and "
                                vs = ddd.valset()
                                d = vs.domain()
                                ts = []
                                evs = ValSet()
                                for v in vs:
                                    evs.update(expand_v(v,d))
                                for ev in evs:
                                    ts.append("[%s]" % ";".join([str(ev[a]) for a in d]))
                                expr += "[%s] in [%s]" \
                                        % (";".join(d), ";".join(ts))
                                return expr

                            vs = list(ddd.v.keys())
                            if len(vs) == 1:
                                mem = mem + [(ddd.a, vs[0])]
                                if len(mem) % MAX_COOP == 0:
                                    expr += v2expr(mem)
                                    mem = []
                                if ddd.v[vs[0]].a != DDD.TOP:
                                    if expr:
                                        expr += " and "
                                    if mem and len(ddd.v[vs[0]].v) > 1:
                                        expr += v2expr(mem) + " and "
                                        mem = []
                                    expr += ddd2expr(ddd.v[vs[0]], mem)
                                elif mem:
                                    expr = v2expr(mem)
                            else:
                                exprs = []
                                for i in vs:
                                    memi = mem + [(ddd.a, i)]
                                    n_expr = ""
                                    if len(memi) % MAX_COOP == 0:
                                        n_expr = v2expr(memi)
                                        memi = []
                                    if ddd.v[i].a != DDD.TOP:
                                        if n_expr:
                                            n_expr += " and "
                                        n_expr += ddd2expr(ddd.v[i], memi)
                                    elif memi:
                                        n_expr = v2expr(memi)
                                    exprs.append(n_expr)
                                return "(" + " or ".join(exprs) + ")"
                            return expr


                        max_ite = 100
                        ddd = DDD.build_reduced(tvs, sd, max_ite=max_ite)
                        v = 1
                        ddd_f = DDD.build_reduced(fvs, sd, max_ite=max_ite)
                        if ddd.size > ddd_f.size:
                            ddd = ddd_f
                            v = 0
                        sm = ddd2expr(ddd)
                        print(sm, file=sys.stderr)

                print("COOPERATIVITY(%s, %s, %d, %d)" % (sm, target_sort, v, 1-v))


print()


#
# initial_state directive
#
init_values = [(sort, default) for (sort, (maxlevel, default)) in sorts.items() if default > 0]
if init_values :
	print("initial_state %s" % (", ".join(["%s %s" % iv for iv in init_values])))


