#!/usr/bin/env python3

from subprocess import *

class V(dict):
    def __hash__(self):
        return hash(tuple(sorted(self.items())))

class ValSet(set):
    def domain(self):
        d = set()
        for v in self:
            d.update(v.keys())
        return list(sorted(d))

    def filter(self, a, i):
        return ValSet([v for v in self if a not in v or v[a] == i])

def load_parameters(fd):
    K = {}
    sd = {}
    mode = 0
    for line in fd:
        line = line.strip()
        if not line:
            continue
        if line.startswith("parameters for "):
            p = line.split()
            a = p[2]
            bs = p[4].split(",")
            mode = 1
            K[a] = dict([(i, ValSet()) for i in sd[a]])
        elif mode == 0:
            a, i = line.split()
            sd[a] = list(range(int(i)+1))
        elif mode == 1:
            x = list(map(int, line.split()))
            K[a][x[-1]].add(V([(bs[j],x[j]) for j in range(len(bs))]))

    return (sd, K)



if __name__ == "__main__":
    import sys
    #sd = {"a": [0, 1], "b": [0, 1]}
    #vs = ValSet([V({"a": 0, "b": 0}), V({"a":1, "b":0}), V({"a":1, "b":1})])
    #print(vs.simplify(sd))
    (sd, K) = load_parameters(sys.stdin)

    p = Popen(["pint-export", "--simplify"], stdin=PIPE)
    out = p.stdin
    def b(s):
        return bytes(s, "utf-8")

    for a in sorted(sd.keys()):
        out.write(b("%s [%s]\n" % (a, ", ".join(map(str,sd[a])))))
    for a in sorted(sd.keys()):
        if a not in K:
            continue
        for incr in [1, -1]:
            if incr > 0:
                r = sd[a][1:]
            else:
                r = sd[a][:-1]
            for i in r:
                myK = ValSet()
                if incr > 0:
                    ri = sd[a][i:]
                else:
                    ri = sd[a][:i+1]
                for j in ri:
                    myK.update(K[a][j].filter(a, i-incr))
                for v in myK:
                    sv = " and ".join(["%s=%s" % (b,j) for (b,j) in
                                        sorted(v.items()) if b != a])
                    if sv:
                        sv = " when %s" % sv
                    out.write(b("%s %d -> %d%s\n" % (a,i-incr,i,sv)))
    out.close()
    p.wait()



