#!/usr/bin/env python3
# -*- coding: utf-8
"""
Copyright or © or Copr. Loïc Paulevé (2011)

lp@inzenet.org

This software is a computer program whose purpose is to provide Process
Hitting related tools.

This software is governed by the CeCILL license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the
CeCILL license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author, the holder of the
economic rights, and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL license and that you accept its terms.
"""

import re
import sys

from xml.dom.minidom import parse

"""
Unsupported (TODO):
- MacroNodes
- transition/action
- transition/event
- transition/fact_ids
- transition/CDATA
"""

inputname = sys.argv[1]
outputname = inputname.replace(".bcx","")+".ph"

bcx = parse(inputname)

# ensure PINT name validity
trMap = {}
def register_name( name ) :
	if ord("0") <= ord(name[0]) <= ord("9") :
		phname = "v%s" % name
		trMap[name] = phname
	return name

def tr( name ) :
	return trMap.get(name, name)


# fetch nodes
SimpleNodes = []
for nt in ["CSimpleNode", "CTrapNode", "CMacroNode"] :
	SimpleNodes += [register_name(n.getAttribute("name")) for n in bcx.getElementsByTagName(nt)]
PermNodes = [register_name(n.getAttribute("name")) for n in bcx.getElementsByTagName("CPermNode")]

# fetch transitions
def read_transition( n ) :
	return {
		"orig" : n.getAttribute("ori"),
		"dest" : n.getAttribute("ext"),
		"condition": n.getAttribute("condition"),
	}
transitions = map(read_transition, bcx.getElementsByTagName("transition"))

# parse transitions
def register_transition( t ) :
	target = t["dest"]
	state_matching = "[%s] in [[1]]" % t["orig"]

	names = set([t["orig"]])
	def make_state_matching( m ) :
		sort = m.group(1)
		if sort in ["and", "or", "not"] :
			return sort
		names.add(sort)
		return "[%s] in [[1]]" % tr(sort)
			

	if t["condition"] :
		my_condition = re.sub(r'\b(\w+)\b', make_state_matching, t["condition"])
		state_matching += " and " + my_condition
	
	return {
		"target": target,
		"state_matching": state_matching,
		"names": names,
	}
	
actions = list(map(register_transition, transitions))

# filter duplicate transitions
dactions = {}
for a in actions :
	if a["target"] not in dactions :
		dactions[a["target"]] = [a]
	else :
		sort_actions = dactions[a["target"]]
		# check if there exists another registered action with same names for condition
		# (we assume: same names = same condition)
		dup = False
		for b in sort_actions :
			if not b["names"].symmetric_difference(a["names"]) :
				dup = True
		if not dup :
			sort_actions.append(a)

#
# PINT output
#
for a in SimpleNodes + PermNodes :
	print("process %s 1" % tr(a))

print()
for sort_actions in dactions.values() :
	for a in sort_actions :
		print("COOPERATIVITY(%s, %s, 1, 0)" % (a["state_matching"], tr(a["target"])))

print()
print("initial_state %s" % ", ".join(["%s 1" % tr(a) for a in PermNodes]))

